{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wayback Machine Saver Python tool for archiving web pages through Internet Archive Wayback Machine Getting Started Prerequisites Python pipx Installation It's recommended to use tools like pipx to install this command-line tool. pipx install wayback-machine-saver Usage Save pages Save URLs from the input file to Internet Archive - Wayback Machine wayback_machine_saver save-pages FILENAME Argument FILENAME: filename to the file that consists of URLs to save e.g., https://example.com https://another-example.com options --deliminator TEXT [default: \"\\n\"] --error-log-filename TEXT [default: save-pages-error-log-\"timestamp\".csv] Get latest archive urls After the URLs have been saved, Internet Archive - Wayback Machine will snap-shot the page to their database and create a timestamp. You can access the latest one through http://web.archive.org/web/[Your URL] and it will be redirected to http://web.archive.org/web/[timestamp]/[Your URL] . This command is used to get the redirected URLs. wayback_machine_saver get-latest-archive-urls FILENAME Argument FILENAME: filename to the file that consists of URLs to retrieved e.g., https://example.com https://another-example.com options --deliminator TEXT [default: \"\\n\"] --output-filename TEXT [default: retrieved-urls-\"timestamp\".csv]] --error-log-filename TEXT [default: get-url-error-log-\"timestamp\".csv] Configuration Wayback Machine Saves supports configurating through environment variable. You can run export VARIABLE=VALUE before running the script to change the behavior. WAYBACK_MACHINE_SAVER_RETRY_TIMES times to retry (default: 3) HTTPX_TIMEOUT timeout for all GET operations (default: 10) Contributing See Contributing Authors Wei Lee weilee.rx@gmail.com Created from Lee-W/cookiecutter-python-template version 0.9.0","title":"Home"},{"location":"#wayback-machine-saver","text":"Python tool for archiving web pages through Internet Archive Wayback Machine","title":"Wayback Machine Saver"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#prerequisites","text":"Python pipx","title":"Prerequisites"},{"location":"#installation","text":"It's recommended to use tools like pipx to install this command-line tool. pipx install wayback-machine-saver","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#save-pages","text":"Save URLs from the input file to Internet Archive - Wayback Machine wayback_machine_saver save-pages FILENAME","title":"Save pages"},{"location":"#argument","text":"FILENAME: filename to the file that consists of URLs to save e.g., https://example.com https://another-example.com","title":"Argument"},{"location":"#options","text":"--deliminator TEXT [default: \"\\n\"] --error-log-filename TEXT [default: save-pages-error-log-\"timestamp\".csv]","title":"options"},{"location":"#get-latest-archive-urls","text":"After the URLs have been saved, Internet Archive - Wayback Machine will snap-shot the page to their database and create a timestamp. You can access the latest one through http://web.archive.org/web/[Your URL] and it will be redirected to http://web.archive.org/web/[timestamp]/[Your URL] . This command is used to get the redirected URLs. wayback_machine_saver get-latest-archive-urls FILENAME","title":"Get latest archive urls"},{"location":"#argument_1","text":"FILENAME: filename to the file that consists of URLs to retrieved e.g., https://example.com https://another-example.com","title":"Argument"},{"location":"#options_1","text":"--deliminator TEXT [default: \"\\n\"] --output-filename TEXT [default: retrieved-urls-\"timestamp\".csv]] --error-log-filename TEXT [default: get-url-error-log-\"timestamp\".csv]","title":"options"},{"location":"#configuration","text":"Wayback Machine Saves supports configurating through environment variable. You can run export VARIABLE=VALUE before running the script to change the behavior. WAYBACK_MACHINE_SAVER_RETRY_TIMES times to retry (default: 3) HTTPX_TIMEOUT timeout for all GET operations (default: 10)","title":"Configuration"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#authors","text":"Wei Lee weilee.rx@gmail.com Created from Lee-W/cookiecutter-python-template version 0.9.0","title":"Authors"},{"location":"contributing/","text":"Step 1. Fork this repository to your GitHub Step 2. Clone the repository from your GitHub git clone https://github.com/[YOUR GITHUB ACCOUNT]/wayback-machine-saver.git Step 3. Add this repository to the remote in your local repository git remote add upstream \"https://github.com/Lee-W/wayback-machine-saver\" You can pull the latest code in main branch through git pull upstream main afterward. Step 4. Check out a branch for your new feature git checkout -b [YOUR FEATURE] Step 5. Install prerequisite python -m pip install pipx python -m pipx install poetryinvoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management Step 6. Create your local Python virtual environment and install dependencies inv env.init-dev Step 7. Work on your new feature Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit Step 8. Run test cases Make sure all test cases pass. inv test Step 9. Run test coverage Check the test coverage and see where you can add test cases. inv test.cov Step 10. Reformat source code Format your code through black and isort . inv style.reformat Step 11. Run style check Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint Step 12. Run security check Ensure the packages installed are secure, and no server vulnerability is introduced inv secure Step 13. Create a Pull Request and celebrate \ud83c\udf89","title":"Contributing"},{"location":"contributing/#step-1-fork-this-repository-to-your-github","text":"","title":"Step 1. Fork this repository to your GitHub"},{"location":"contributing/#step-2-clone-the-repository-from-your-github","text":"git clone https://github.com/[YOUR GITHUB ACCOUNT]/wayback-machine-saver.git","title":"Step 2. Clone the repository from your GitHub"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","text":"git remote add upstream \"https://github.com/Lee-W/wayback-machine-saver\" You can pull the latest code in main branch through git pull upstream main afterward.","title":"Step 3. Add this repository to the remote in your local repository"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","text":"git checkout -b [YOUR FEATURE]","title":"Step 4. Check out a branch for your new feature"},{"location":"contributing/#step-5-install-prerequisite","text":"python -m pip install pipx python -m pipx install poetryinvoke python -m pipx ensurepath pipx : for python tool management poetry : for dependency management invoke : for task management","title":"Step 5. Install prerequisite"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","text":"inv env.init-dev","title":"Step 6. Create your local Python virtual environment and install dependencies"},{"location":"contributing/#step-7-work-on-your-new-feature","text":"Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit","title":"Step 7. Work on your new feature"},{"location":"contributing/#step-8-run-test-cases","text":"Make sure all test cases pass. inv test","title":"Step 8. Run test cases"},{"location":"contributing/#step-9-run-test-coverage","text":"Check the test coverage and see where you can add test cases. inv test.cov","title":"Step 9. Run test coverage"},{"location":"contributing/#step-10-reformat-source-code","text":"Format your code through black and isort . inv style.reformat","title":"Step 10. Reformat source code"},{"location":"contributing/#step-11-run-style-check","text":"Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint","title":"Step 11. Run style check"},{"location":"contributing/#step-12-run-security-check","text":"Ensure the packages installed are secure, and no server vulnerability is introduced inv secure","title":"Step 12. Run security check"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","text":"","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89"}]}